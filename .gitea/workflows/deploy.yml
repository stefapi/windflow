name: Deploy

on:
  workflow_run:
    workflows: ["Tests", "Build Docker Images"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment:
      name: development
      url: https://dev.windflow.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEV_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to development server
        env:
          SERVER_HOST: ${{ secrets.DEV_SERVER_HOST }}
          SERVER_USER: ${{ secrets.DEV_SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.DEV_DEPLOY_PATH }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            cd $DEPLOY_PATH
            git pull origin develop
            cp .env.dev .env
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d --force-recreate
            docker compose -f docker-compose.yml exec -T api alembic upgrade head
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f https://dev.windflow.example.com/health || exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Development deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.windflow.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.STAGING_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup
        env:
          SERVER_HOST: ${{ secrets.STAGING_SERVER_HOST }}
          SERVER_USER: ${{ secrets.STAGING_SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.STAGING_DEPLOY_PATH }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            cd $DEPLOY_PATH
            docker compose exec -T postgres pg_dump -U windflow windflow > backup_$(date +%Y%m%d_%H%M%S).sql
          EOF

      - name: Deploy to staging server
        env:
          SERVER_HOST: ${{ secrets.STAGING_SERVER_HOST }}
          SERVER_USER: ${{ secrets.STAGING_SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.STAGING_DEPLOY_PATH }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            cd $DEPLOY_PATH
            git pull origin main
            cp .env.staging .env
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d --force-recreate
            docker compose -f docker-compose.yml exec -T api alembic upgrade head
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.windflow.example.com/health || exit 1

      - name: Run smoke tests
        run: |
          curl -f https://staging.windflow.example.com/api/health || exit 1
          curl -f https://staging.windflow.example.com/api/docs || exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://windflow.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            cd $DEPLOY_PATH
            docker compose exec -T postgres pg_dump -U windflow windflow > backup_$(date +%Y%m%d_%H%M%S).sql
          EOF

      - name: Enable maintenance mode
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST "touch /var/www/maintenance.flag"

      - name: Deploy to production server
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            cd $DEPLOY_PATH
            git pull origin main
            cp .env.production .env
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --force-recreate
            docker compose -f docker-compose.prod.yml exec -T api alembic upgrade head
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f https://windflow.example.com/health || exit 1

      - name: Run smoke tests
        run: |
          curl -f https://windflow.example.com/api/health || exit 1
          curl -f https://windflow.example.com/api/docs || exit 1

      - name: Disable maintenance mode
        if: always()
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST "rm -f /var/www/maintenance.flag"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'ðŸš€ Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
