name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run tests with coverage
        env:
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
        run: |
          poetry run pytest backend/tests/ --cov=backend/app --cov-report=xml

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=windflow
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=backend/app,frontend/src
            -Dsonar.tests=backend/tests,frontend/tests
            -Dsonar.exclusions=**/*.test.ts,**/*.spec.ts,**/node_modules/**

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run Black (code formatting check)
        run: |
          poetry run black --check backend/

      - name: Run isort (import sorting check)
        run: |
          poetry run isort --check-only backend/

      - name: Run Flake8 (linting)
        run: |
          poetry run flake8 backend/ --count --statistics

      - name: Run Pylint (code analysis)
        run: |
          poetry run pylint backend/app --exit-zero --output-format=colorized

      - name: Run Bandit (security linting)
        run: |
          poetry run bandit -r backend/app -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0

      - name: Check for security vulnerabilities (Python)
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          pip install safety
          safety check --file=requirements.txt --output json > safety-report.json || true

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-security-report
          path: safety-report.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Check for security vulnerabilities (Node.js)
        run: |
          cd frontend
          pnpm audit --json > ../npm-audit-report.json || true

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: npm-audit-report.json

  coverage-check:
    name: Code Coverage Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: windflow
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: windflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://windflow:test_password@localhost:5432/windflow_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
        run: |
          poetry run pytest backend/tests/ --cov=backend/app --cov-report=term --cov-report=html --cov-fail-under=80

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/

      - name: Check coverage threshold
        run: |
          COVERAGE=$(poetry run coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage is above 80% threshold"
          fi

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.api
          push: false
          load: true
          tags: windflow-api:scan

      - name: Run Trivy vulnerability scanner (API)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'windflow-api:scan'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      # Note: GitHub CodeQL action not available in Gitea
      # Trivy results are stored as artifacts instead
      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-api-results
          path: 'trivy-api-results.sarif'

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [sonarqube, code-quality, dependency-check, coverage-check, docker-security-scan]
    if: always()

    steps:
      - name: Check quality gates
        run: |
          echo "## Quality Gates Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| SonarQube | ${{ needs.sonarqube.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          echo "| Coverage Check | ${{ needs.coverage-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          echo "| Docker Security | ${{ needs.docker-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |"

          if [ "${{ needs.sonarqube.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.coverage-check.result }}" != "success" ]; then
            echo ""
            echo "⚠️ Some quality gates failed. Please review the logs above."
            exit 1
          else
            echo ""
            echo "✅ All quality gates passed!"
          fi
