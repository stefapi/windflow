version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: windflow
      POSTGRES_USER: windflow
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-windflow123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U windflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - windflow-backend

  # Cache Redis
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - windflow-backend

  # Vault pour la gestion des secrets
  vault:
    image: hashicorp/vault:1.15
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-vault-dev-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./infrastructure/docker/vault-config:/vault/config
    command: vault server -dev -dev-listen-address=0.0.0.0:8200
    networks:
      - windflow-backend

  # API Backend FastAPI
  windflow-api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://windflow:${POSTGRES_PASSWORD:-windflow123}@postgres:5432/windflow
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-vault-dev-token}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - windflow-backend
      - windflow-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api/`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Worker Celery pour les tâches asynchrones
  windflow-worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://windflow:${POSTGRES_PASSWORD:-windflow123}@postgres:5432/windflow
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-vault-dev-token}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - windflow-backend

  # Frontend Vue.js
  windflow-frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/Dockerfile.frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      VITE_API_BASE_URL: http://localhost:8000/api/v1
      VITE_WS_URL: ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - windflow-api
    networks:
      - windflow-frontend

  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - windflow-api
      - windflow-frontend
    networks:
      - windflow-frontend

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/docker/prometheus-rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - windflow-backend

  # Visualisation avec Grafana
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_SECURITY_ADMIN_USER: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - windflow-backend

  # Flower pour monitoring Celery
  flower:
    image: mher/flower:latest
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower123}
    depends_on:
      - redis
    networks:
      - windflow-backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  windflow-backend:
    driver: bridge
    internal: false
  windflow-frontend:
    driver: bridge
    internal: false
