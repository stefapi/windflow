version: '3.8'

services:
  # ============================================================================
  # REVERSE PROXY & SSL TERMINATION
  # ============================================================================

  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard (à désactiver en production)
    environment:
      TRAEFIK_API_DASHBOARD: "false"  # Désactivé en production
      TRAEFIK_API_INSECURE: "false"
      TRAEFIK_ENTRYPOINTS_WEB_ADDRESS: ":80"
      TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS: ":443"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: ${ACME_EMAIL}
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE: "/letsencrypt/acme.json"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT: "web"
      TRAEFIK_PROVIDERS_DOCKER: "true"
      TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT: "false"
      TRAEFIK_LOG_LEVEL: "INFO"
      TRAEFIK_ACCESSLOG: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
      - traefik_logs:/var/log/traefik
    networks:
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      # Middleware de sécurité
      - "traefik.http.middlewares.security-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.security-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stspreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsseconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"

  # ============================================================================
  # DATABASE & STORAGE
  # ============================================================================

  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
      - ./infrastructure/docker/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=2GB
      -c max_wal_size=4GB
    labels:
      - "traefik.enable=false"

  redis:
    image: redis:7-alpine
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - redis_config:/usr/local/etc/redis
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    labels:
      - "traefik.enable=false"

  # ============================================================================
  # SECRETS MANAGEMENT
  # ============================================================================

  vault:
    image: hashicorp/vault:1.15
    restart: unless-stopped
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_LOCAL_CONFIG: |
        {
          "backend": {
            "file": {
              "path": "/vault/data"
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": true
            }
          },
          "ui": false,
          "disable_mlock": true,
          "default_lease_ttl": "168h",
          "max_lease_ttl": "720h"
        }
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: vault server -config=/vault/config/local.json
    labels:
      - "traefik.enable=false"

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================

  windflow-api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
      args:
        BUILD_ENV: production
    restart: always
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 40

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_MAX_CONNECTIONS: 100

      # Vault
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN}

      # Security
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7

      # Application
      APP_ENV: production
      LOG_LEVEL: INFO
      DEBUG: "false"

      # Monitoring
      PROMETHEUS_ENABLED: "true"

      # LLM Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-ollama}
      LLM_MODEL: ${LLM_MODEL:-codellama:13b}
      LLM_BASE_URL: ${LLM_BASE_URL}

      # Workers
      API_WORKERS: 4
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - windflow-backend
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`) || (Host(`${DOMAIN}`) && PathPrefix(`/api/`))"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.middlewares=security-headers"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.services.api.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.api.loadbalancer.healthcheck.interval=30s"

  windflow-worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.worker
      args:
        BUILD_ENV: production
    restart: always
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0

      # Vault
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN}

      # Security
      SECRET_KEY: ${SECRET_KEY}

      # Application
      APP_ENV: production
      LOG_LEVEL: INFO

      # Celery
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_WORKER_CONCURRENCY: 4
      CELERY_TASK_SOFT_TIME_LIMIT: 1800
      CELERY_TASK_TIME_LIMIT: 3600

      # LLM Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-ollama}
      LLM_MODEL: ${LLM_MODEL:-codellama:13b}
      LLM_BASE_URL: ${LLM_BASE_URL}
    volumes:
      - app_logs:/app/logs
      - worker_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "windflow.tasks", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=false"

  windflow-frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/Dockerfile.frontend
      args:
        BUILD_ENV: production
        VITE_API_BASE_URL: https://api.${DOMAIN}/api/v1
        VITE_WS_URL: wss://api.${DOMAIN}/ws
    restart: always
    networks:
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
      replicas: 2
    depends_on:
      - windflow-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.middlewares=security-headers"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # ============================================================================
  # MONITORING & OBSERVABILITY
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./infrastructure/docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/docker/prometheus-rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - windflow-backend
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=auth-prometheus"
      - "traefik.http.middlewares.auth-prometheus.basicauth.users=${PROMETHEUS_BASIC_AUTH}"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_SERVER_DOMAIN: grafana.${DOMAIN}
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: ${POSTGRES_USER}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      GF_SESSION_PROVIDER: redis
      GF_SESSION_PROVIDER_CONFIG: addr=redis:6379,pool_size=100,db=2,password=${REDIS_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: noreply@${DOMAIN}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - windflow-backend
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    depends_on:
      - postgres
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Node Exporter pour les métriques système
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    labels:
      - "traefik.enable=false"

  # cAdvisor pour les métriques containers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    command:
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
      - '--disable_metrics=accelerator,cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset,advtcp,memory_numa'
    labels:
      - "traefik.enable=false"

  # ============================================================================
  # BACKUP & MAINTENANCE
  # ============================================================================

  backup:
    image: postgres:15-alpine
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    volumes:
      - postgres_backup:/backup
      - ./infrastructure/docker/backup-scripts:/scripts:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    depends_on:
      - postgres
    entrypoint: /scripts/backup-scheduler.sh
    labels:
      - "traefik.enable=false"

  # Log aggregation avec Loki
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    volumes:
      - loki_data:/loki
      - ./infrastructure/docker/loki-config.yml:/etc/loki/local-config.yaml:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=false"

  # Log shipping avec Promtail
  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - app_logs:/var/log/app:ro
      - traefik_logs:/var/log/traefik:ro
      - ./infrastructure/docker/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - windflow-backend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    labels:
      - "traefik.enable=false"

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  # Application data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
  postgres_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
  redis_config:
    driver: local
  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/vault
  vault_logs:
    driver: local

  # Application volumes
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_PATH}/app
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/uploads
  worker_data:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/grafana
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/loki

  # SSL certificates
  letsencrypt_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/letsencrypt

  # Logs
  traefik_logs:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  traefik-public:
    external: true
  windflow-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  windflow-frontend:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.21.0.0/16
